Naive:
Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

class Solution {
public:
    void merge(vector<int>&nums1,int m,vector<int>&nums2,int n) {
        int i=0,j=0;
        vector<int>v;
        while(i<m && j<n){
            if(nums1[i]<=nums2[j]){
                v.push_back(nums1[i++]);
            }else{
                v.push_back(nums2[j++]);
            }
        }
        while(i<m){
            v.push_back(nums1[i++]);
        }
        while(j<n){
            v.push_back(nums2[j++]);
        }
        for(int i=0; i<m+n; i++){
            nums1[i]=v[i];
        }
    }
};




Optimized: Iterate array from back. You might figure out something...
Without space:
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=m-1, j=n-1, k=nums1.size()-1;
        while(i>=0 && j>=0){
            if(nums1[i]>=nums2[j]){
                nums1[k]=nums1[i];
                k--;i--;
            }else{
                nums1[k]=nums2[j];
                k--;j--;
            }
        }
        while(j>=0){
            nums1[k--]=nums2[j--];
        }
    }
};
